<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="./teclado/js"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-788PHS7H0Z');
    </script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content=".">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="">
    <link rel="stylesheet" href="./teclado/bootstrap.min.css">
    <link rel="stylesheet" href="./teclado/fontawesome.min.css">
    <link rel="stylesheet" href="./teclado/style.css">
    <script data-ad-client="ca-pub-3037373499452828" async src="./teclado/f.txt"></script>
    <link rel="icon" href="avell.ico" type="image/x-icon">
    <link rel="shortcut icon" href="avell.ico" type="image/x-icon">
    <title>Avell KeyTest Pro</title>
    <style>
        .key, .numeric-key, .arrows-key {
            cursor: not-allowed;
            transition: background-color 0.3s, color 0.3s;
        }
        .approved-message {
            display: none;
            color: green;
            font-size: 24px;
            text-align: center;
            margin-top: 20px;
            font-weight: bold;
        }
        .keyboard-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 60vh;
            padding: 20px;
        }
        .keyboard {
            background-color: #000;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
            display: inline-block;
            width: fit-content;
            max-width: 100%;
        }
        .footer {
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #000;
            color: white;
            padding: 10px 0;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
            width: 100%;
            position: fixed;
            bottom: 0;
        }
        .footer img {
            height: 50px;
            margin-left: 20px;
        }
        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: absolute;
            top: 10px;
            left: 10px;
            width: 100%;
            padding: 0 20px;
            box-sizing: border-box;
        }
        .header img {
            width: 200px;
            height: auto;
        }
        .subtitle {
            font-size: 18px;
            font-weight: bold;
            color: red;
            margin-left: 20px;
            display: flex;
            align-items: center;
        }
        .back-button {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        
        /* Correção para alinhamento do Enter2 */
        .enter2 {
            margin-top: -1px;
        }
        
        .plus2 {
            margin-top: -1px;
        }
        
        /* Diminuir o tamanho do shift direito e da tecla ? / */
        .shift-small {
            width: 55px !important;
            min-width: 55px !important;
        }
        
        .slash-small {
            width: 60px !important;
            min-width: 60px !important;
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="./teclado/logoavell.png" alt="Descrição da Imagem">
        <span class="subtitle">⚠️ Cada tecla deve ser pressionada cinco vezes para completar o teste. ⚠️</span>
        <button class="back-button" onclick="window.history.back();">Voltar</button>
    </div>
    <div class="todo">
        <div class="row">
            <br><br><br><br><br>
            <div class="col-md-8"></div>
        </div>
        <div class="row alert-screen">
            <div class="col-12">
                <p><i class="fas fa-exclamation-triangle"></i> Desculpe! Não podemos executar o teste em dispositivos móveis. Para correto funcionamento, recomendamos usar um PC ou notebook.</p>
            </div>
        </div>
        <div class="keyboard-container">
            <div class="keyboard">
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-row bd-highlight">
                            <div id="Escape" class="key function space4">Esc</div>
                            <div id="F1" class="key function">F1</div>
                            <div id="F2" class="key function">F2</div>
                            <div id="F3" class="key function">F3</div>
                            <div id="F4" class="key function">F4</div>
                            <div id="F5" class="key function">F5</div>
                            <div id="F6" class="key function">F6</div>
                            <div id="F7" class="key function">F7</div>
                            <div id="F8" class="key function">F8</div>
                            <div id="F9" class="key function">F9</div>
                            <div id="F10" class="key function">F10</div>
                            <div id="F11" class="key function">F11</div>
                            <div id="F12" class="key function">F12</div>
                            <div id="PrintScreen" class="key function">Print Screen</div>
                            <div id="ScrollLock" class="key function">Scroll Lock</div>
                            <div id="Pause" class="key function">Pause Break</div>
                        </div>
                        <div class="d-flex flex-row bd-highlight">
                            <div id="Backquote" class="key">'<br>"</div>
                            <div id="Digit1" class="key">1<br>!</div>
                            <div id="Digit2" class="key">2<br>@</div>
                            <div id="Digit3" class="key">3<br>#</div>
                            <div id="Digit4" class="key">4<br>$</div>
                            <div id="Digit5" class="key">5<br>%</div>
                            <div id="Digit6" class="key">6<br>&uml;</div>
                            <div id="Digit7" class="key">7<br>&amp;</div>
                            <div id="Digit8" class="key">8<br>*</div>
                            <div id="Digit9" class="key">9<br>(</div>
                            <div id="Digit0" class="key">0<br>)</div>
                            <div id="Minus" class="key">-<br>_</div>
                            <div id="Equal" class="key">=<br>+</div>
                            <div id="Backspace" class="key space2">Backspace</div>
                            <div id="Insert" class="arrows-key">Ins</div>
                            <div id="Home" class="arrows-key">Home</div>
                            <div id="PageUp" class="arrows-key">Pg Up</div>
                            <div id="NumLock" class="numeric-key">Num<br> Lock</div>
                            <div id="NumpadDivide" class="numeric-key">/</div>
                            <div id="NumpadMultiply" class="numeric-key">*</div>
                            <div id="NumpadSubtract" class="numeric-key">-</div>
                        </div>
                        <div class="d-flex flex-row bd-highlight">
                            <div id="Tab" class="key tab">Tab</div>
                            <div id="KeyQ" class="key">Q</div>
                            <div id="KeyW" class="key">W</div>
                            <div id="KeyE" class="key">E</div>
                            <div id="KeyR" class="key">R</div>
                            <div id="KeyT" class="key">T</div>
                            <div id="KeyY" class="key">Y</div>
                            <div id="KeyU" class="key">U</div>
                            <div id="KeyI" class="key">I</div>
                            <div id="KeyO" class="key">O</div>
                            <div id="KeyP" class="key">P</div>
                            <div id="BracketLeft" class="key">´<br>`</div>
                            <div id="BracketRight" class="key">[<br>{</div>
                            <div id="Enter" class="key enter1">Enter</div>
                            <div id="Delete" class="arrows-key">Del</div>
                            <div id="End" class="arrows-key">End</div>
                            <div id="PageDown" class="arrows-key">Pg Dn</div>
                            <div id="Numpad7" class="numeric-key">7 <br> <span class="numeric-special-key">HOME</span></div>
                            <div id="Numpad8" class="numeric-key">8 <br> &uarr;</div>
                            <div id="Numpad9" class="numeric-key">9 <br> <span class="numeric-special-key">Pg Up</span></div>
                            <div id="NumpadAdd" class="key plus1">+</div>
                        </div>
                        <div class="d-flex flex-row bd-highlight">
                            <div id="CapsLock" class="key caps">Caps Lock</div>
                            <div id="KeyA" class="key">A</div>
                            <div id="KeyS" class="key">S</div>
                            <div id="KeyD" class="key">D</div>
                            <div id="KeyF" class="key">F</div>
                            <div id="KeyG" class="key">G</div>
                            <div id="KeyH" class="key">H</div>
                            <div id="KeyJ" class="key">J</div>
                            <div id="KeyK" class="key">K</div>
                            <div id="KeyL" class="key">L</div>
                            <div id="Semicolon" class="key">ç<br>Ç</div>
                            <div id="Quote" class="key">~<br>^</div>
                            <div id="Backslash" class="key">]<br>}</div>
                            <div id="Enter2" class="key enter2"></div>
                            <div id="Numpad4" class="numeric-key">4 <br> &larr;</div>
                            <div id="Numpad5" class="numeric-key">5</div>
                            <div id="Numpad6" class="numeric-key">6 <br> &rarr;</div>
                            <div id="NumpadAdd2" class="key plus2"></div>
                        </div>
                        <div class="d-flex flex-row bd-highlight">
                            <div id="ShiftLeft" class="key2">Shift</div>
                            <div id="IntlBackslash" class="key">\<br>|</div>
                            <div id="KeyZ" class="key">Z</div>
                            <div id="KeyX" class="key">X</div>
                            <div id="KeyC" class="key">C</div>
                            <div id="KeyV" class="key">V</div>
                            <div id="KeyB" class="key">B</div>
                            <div id="KeyN" class="key">N</div>
                            <div id="KeyM" class="key">M</div>
                            <div id="Comma" class="key">,<br>&lt;</div>
                            <div id="Period" class="key">&gt;<br>.</div>
                            <div id="Slash" class="key Slash">:<br>;</div>
                            <div id="IntlRo" class="key slash-small">?<br>/</div>
                            <div id="ShiftRight" class="key shift-small">Shift</div>
                            <div id="ArrowUp" class="arrows-key">&uarr;</div>
                            <div id="Numpad1" class="numeric-key">1 <br> <span class="numeric-special-key">End</span></div>
                            <div id="Numpad2" class="numeric-key">2 <br> &darr;</div>
                            <div id="Numpad3" class="numeric-key">3 <br> <span class="numeric-special-key">Pg Dn</span></div>
                            <div id="NumpadEnter" class="key plus1">Enter</div>
                        </div>
                        <div class="d-flex flex-row bd-highlight">
                            <div id="ControlLeft" class="key modify-keys">Ctrl</div>
                            <div id="AudioVolumeMute" class="key modify-keys">Fn</div>
                            <div id="MetaLeft" class="key modify-keys">Win</div>
                            <div id="AltLeft" class="key modify-keys">Alt</div>
                            <div id="Space" class="key space"></div>
                            <div id="AltRight" class="key modify-keys">AltGr</div>
                            <div id="ContextMenu" class="key modify-keys">&#9776;</div>
                            <div id="ControlRight" class="key2">Ctrl</div>
                            <div id="ArrowLeft" class="arrows-key">&larr;</div>
                            <div id="ArrowDown" class="arrows-key">&darr;</div>
                            <div id="ArrowRight" class="arrows-key">&rarr;</div>
                            <div id="Numpad0" class="numeric-key">0 <br> <span class="numeric-special-key">INS</span></div>
                            <div id="NumpadDecimal" class="numeric-key">,<br> <span class="numeric-special-key">DEL</span></div>
                            <div id="NumpadEnter2" class="key plus2"></div>
                        </div>
                        <div id="approved-message" class="approved-message">✅ TECLADO APROVADO ✅</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer">
        <p>&copy; 2025 Inovação e Desenvolvimento</p>
        <img src="avell.ico" alt="Imagem da Nota de Rodapé">
    </div>

    <script>
        // Variáveis globais
        const keyPressCounts = {};
        const maxPresses = 5;
        const singlePressKeys = ['MetaLeft', 'PrintScreen']; // Teclas que precisam apenas 1 pressionamento
        const doubleKeys = {
            'Enter': ['Enter', 'Enter2'],
            'NumpadAdd': ['NumpadAdd', 'NumpadAdd2'],
            'NumpadEnter': ['NumpadEnter', 'NumpadEnter2']
        };

        // Inicialização quando a página carrega
        window.addEventListener('load', () => {
            start();
        });

        function start() {
            initializeKeys();
            render();
            blockSpecialKeys();
        }

        function initializeKeys() {
            const keys = document.querySelectorAll('.key, .numeric-key, .arrows-key');
            keys.forEach(key => {
                if (key.id) {
                    keyPressCounts[key.id] = 0;
                }
            });
        }

        function blockSpecialKeys() {
            // Bloqueia teclas especiais do Windows de forma mais agressiva
            document.addEventListener('keydown', (event) => {
                // Bloqueia Print Screen
                if (event.code === 'PrintScreen' || event.key === 'PrintScreen') {
                    event.preventDefault();
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    return false;
                }
                
                // Bloqueia tecla Windows (Meta)
                if (event.code === 'MetaLeft' || event.code === 'MetaRight' || 
                    event.key === 'Meta' || event.key === 'OS') {
                    event.preventDefault();
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    return false;
                }

                // Bloqueia outras combinações problemáticas
                if (event.key === 'F11') { // Tela cheia
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }

                if (event.altKey && event.key === 'Tab') { // Alt+Tab
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }

                if (event.ctrlKey && event.key === 'Escape') { // Ctrl+Esc
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }
            }, true); // Use capture = true para capturar antes de outros handlers

            // Bloqueia também no keyup
            document.addEventListener('keyup', (event) => {
                if (event.code === 'PrintScreen' || event.key === 'PrintScreen' ||
                    event.code === 'MetaLeft' || event.code === 'MetaRight' || 
                    event.key === 'Meta' || event.key === 'OS') {
                    event.preventDefault();
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    return false;
                }
            }, true);

            // Bloqueia menu de contexto
            document.addEventListener('contextmenu', (event) => {
                event.preventDefault();
                return false;
            });
        }

        function render() {
            pressedKey();
            activeKey();
        }

        function pressedKey() {
            document.addEventListener('keydown', (event) => {
                // Bloqueia primeiro
                event.preventDefault();
                event.stopPropagation();

                const keyID = event.code;
                const keysToActivate = doubleKeys[keyID] || [keyID];
                
                keysToActivate.forEach(currentKeyID => {
                    const keyElement = document.getElementById(currentKeyID);
                    if (keyElement && keyPressCounts[currentKeyID] !== undefined) {
                        // Só adiciona vermelho se ainda não estiver aprovado (verde)
                        if (keyElement.style.backgroundColor !== 'green') {
                            keyElement.style.backgroundColor = 'red';
                            keyElement.style.color = 'white';
                        }
                    }
                });
            });
        }

        function activeKey() {
            document.addEventListener('keyup', (event) => {
                // Bloqueia primeiro
                event.preventDefault();
                event.stopPropagation();

                const keyID = event.code;
                const keysToActivate = doubleKeys[keyID] || [keyID];
                
                keysToActivate.forEach(currentKeyID => {
                    const keyElement = document.getElementById(currentKeyID);
                    if (keyElement && keyPressCounts[currentKeyID] !== undefined) {
                        
                        // Determina quantos pressionamentos são necessários
                        const requiredPresses = singlePressKeys.includes(currentKeyID) ? 1 : maxPresses;
                        
                        // Incrementa contador apenas se não estiver aprovado
                        if (keyPressCounts[currentKeyID] < requiredPresses) {
                            keyPressCounts[currentKeyID]++;
                            
                            // Se atingiu o número necessário, fica verde (aprovado)
                            if (keyPressCounts[currentKeyID] >= requiredPresses) {
                                keyElement.style.backgroundColor = 'green';
                                keyElement.style.color = 'white';
                                checkAllKeysApproved();
                            } else {
                                // Volta para a cor original se ainda não foi aprovado
                                keyElement.style.backgroundColor = '';
                                keyElement.style.color = '';
                            }
                        }
                    }
                });
            });
        }

        function checkAllKeysApproved() {
            const allKeys = document.querySelectorAll('.key, .numeric-key, .arrows-key');
            const allApproved = Array.from(allKeys).every(key => 
                key.id && key.style.backgroundColor === 'green'
            );
            
            if (allApproved) {
                document.getElementById('approved-message').style.display = 'block';
            }
        }

        // Bloqueia atalhos adicionais
        window.addEventListener('beforeunload', (event) => {
            // Não permite sair da página facilmente durante o teste
        });

        // Intercepta tentativas de usar F12 (DevTools)
        document.addEventListener('keydown', (event) => {
            if (event.key === 'F12') {
                event.preventDefault();
                return false;
            }
        });
    </script>
</body>
</html>
